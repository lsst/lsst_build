#!/usr/bin/env python
#
# lsst-build [build|prepare] <build_directory> [ref]
#

import argparse
import os

from lsst.ci.build import Builder
from lsst.ci.prepare import BuildDirectoryConstructor

parser = argparse.ArgumentParser(
    description="Build LSST Software Stack from git source",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog="""Examples:
    lsst-build prepare <build_directory> [ref1 [ref2 [...]]]
    lsst-build build <build_directory>
.
""",
)
subparsers = parser.add_subparsers()

# Parser for the 'prepare' command
prepare = subparsers.add_parser("prepare", help="Prepare the source tree for build")
prepare.set_defaults(func=BuildDirectoryConstructor.run)
prepare.add_argument("build_dir", type=str, help="Build directory")
prepare.add_argument("products", type=str, help="Top-level products to build", nargs="+")
prepare.add_argument(
    "--ref", default=[], action="append", type=str, help="An ordered list of refs to check out"
)
prepare.add_argument("--repos", type=str, help="YAML file with map of product names to git repository URLs.")
prepare.add_argument(
    "--repository-pattern",
    type=str,
    default=os.environ.get("REPOSITORY_PATTERN"),
    help="Python pattern to source git repository ('|'-delimited; default: $REPOSITORY_PATTERN)",
)
prepare.add_argument("--sha-abbrev-len", default=10, type=int, help="Length of SHA1 commit ID abbreviation")
prepare.add_argument(
    "--build-id",
    default=None,
    type=str,
    help="Build ID (default: autodetected from existing EUPS or git tags)",
)
prepare.add_argument("--no-fetch", action="store_true", help="Don't git-fetch any products")
prepare.add_argument("--exclusion-map", type=str, help="File with map of optional packages to exclude.")
prepare.add_argument(
    "--version-git-repo", type=str, help="Working directory of a git repository with the version database."
)
prepare.add_argument("--tries", default=5, type=int, help="Number of times to retry select git operations")

# Parser for the 'build' command
build = subparsers.add_parser("build", help="Build the source tree given the manifest")
build.set_defaults(func=Builder.run)
build.add_argument(
    "build_dir", type=str, help="Build directory with manifest.txt built by the `prepare` subcommand"
)
build.add_argument(
    "--no-binary-fetch",
    help="Will not attempt to download binaries, instead it will build products from source",
    action="store_true",
)

args = parser.parse_args()

args.func(args)
